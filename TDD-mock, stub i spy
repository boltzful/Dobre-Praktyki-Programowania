import unittest
from unittest.mock import Mock, create_autospec
from payment_system import PaymentProcessor, PaymentGateway, TransactionResult, TransactionStatus, NetworkException, PaymentException, RefundException

class TestPaymentProcessor(unittest.TestCase):
    def setUp(self):
        self.mock_gateway = create_autospec(PaymentGateway)
        self.processor = PaymentProcessor(self.mock_gateway)

    def test_process_payment_successful(self):
        # Mockowanie poprawnego obciążenia
        transaction_result = TransactionResult(success=True, transactionId="txn123")
        self.mock_gateway.charge.return_value = transaction_result

        result = self.processor.processPayment("user123", 100.0)
        self.assertTrue(result.success)
        self.assertEqual(result.transactionId, "txn123")
        self.mock_gateway.charge.assert_called_with("user123", 100.0)

    def test_process_payment_failure_due_to_payment_exception(self):
        # Mockowanie wyjątku PaymentException
        self.mock_gateway.charge.side_effect = PaymentException("Payment failed")

        result = self.processor.processPayment("user123", 100.0)
        self.assertFalse(result.success)
        self.assertEqual(result.message, "Payment failed")
        self.mock_gateway.charge.assert_called_once()

    def test_process_payment_invalid_amount(self):
        # Test nieprawidłowej kwoty
        result = self.processor.processPayment("user123", -50.0)
        self.assertFalse(result.success)
        self.assertEqual(result.message, "Invalid input parameters")

    def test_refund_payment_successful(self):
        # Mockowanie poprawnego zwrotu
        transaction_result = TransactionResult(success=True, transactionId="txn123")
        self.mock_gateway.refund.return_value = transaction_result

        result = self.processor.refundPayment("txn123")
        self.assertTrue(result.success)
        self.mock_gateway.refund.assert_called_with("txn123")

    def test_refund_payment_failure_due_to_refund_exception(self):
        # Mockowanie wyjątku RefundException
        self.mock_gateway.refund.side_effect = RefundException("Refund failed")

        result = self.processor.refundPayment("txn123")
        self.assertFalse(result.success)
        self.assertEqual(result.message, "Refund failed")
        self.mock_gateway.refund.assert_called_once()

    def test_get_payment_status_completed(self):
        # Mockowanie statusu ukończonego
        self.mock_gateway.getStatus.return_value = TransactionStatus.COMPLETED

        status = self.processor.getPaymentStatus("txn123")
        self.assertEqual(status, TransactionStatus.COMPLETED)
        self.mock_gateway.getStatus.assert_called_with("txn123")

    def test_get_payment_status_network_exception(self):
        # Mockowanie wyjątku NetworkException
        self.mock_gateway.getStatus.side_effect = NetworkException("Network error")

        status = self.processor.getPaymentStatus("txn123")
        self.assertEqual(status, TransactionStatus.FAILED)
        self.mock_gateway.getStatus.assert_called_once()

if __name__ == "__main__":
    unittest.main()
